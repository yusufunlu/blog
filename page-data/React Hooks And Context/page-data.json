{"componentChunkName":"component---src-templates-blog-post-js","path":"/React Hooks And Context/","result":{"data":{"site":{"siteMetadata":{"title":"yusufunlu","author":"Yusuf Unlu"}},"markdownRemark":{"id":"b674b53f-f8a8-5c2b-b35e-ce22522dbf95","html":"<p>React hook kullanmanız için React dependancy en az 16.8 olmalıdır.\nKendi hook’larımızı yazabileceğimiz gibi React bize hazır hook’lar da sunar. <strong>useState</strong>, <strong>useEffect</strong></p>\n<ul>\n<li>Hooks döngüler ve if gibi koşullardan çağrılmamalı</li>\n<li>Hooks sadece function react component’lerden veya kendi yazdığımız hook’lardan çağrılmalı. Düz javascript kodlarından çağrılmamalı</li>\n</ul>\n<h2 id=\"usestate\"><a href=\"#usestate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useState</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from &#39;react&#39;;\n\nfunction Example() {\n  // &quot;count&quot; diyeceğimiz yeni bir state değişkeni tanımlayın\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>\n<ul>\n<li><strong>useState</strong> bir hook’tur ve geriye bir çift döner. İlki oluşturulan state alanınının değeridir, ikincisi de bu state’i set etmek için gereken fonksiyondur. </li>\n<li>Hook’lardan önce function component’ler state’e sahip olamıyordu ama artık olabiliyor</li>\n<li>Artık react hook’ları kullanıyorsak react class component kullanmak zorunda değiliz.</li>\n<li>Artık function component ile her işi yapabildiğimize göre <strong>this</strong> de kullanamayız ve gerek de yoktur.</li>\n</ul>\n<p>Hook kullanmadan, class component ile yukarıdaki kodu şöyle yazabilirdik.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\n          Click me\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code></pre></div>\n<ul>\n<li>this.state.count => count </li>\n<li>this.setState({ count: this.state.count + 1 }) => setCount(count + 1)</li>\n</ul>\n<h2 id=\"useeffect\"><a href=\"#useeffect\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useEffect</h2>\n<p>Mutasyonlar, abonelikler, zamanlayıcılar, loglama, ve diğer yan etkisi olan işlemler bir fonksiyon bileşenin render aşamasında bulunmazlar.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState, useEffect } from &#39;react&#39;;\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  // componentDidMount ve componentDidUpdate kullanımına benzer bir kullanım sunar:\n  useEffect(() =&gt; {\n    // tarayıcının başlık bölümünü değiştirmemizi sağlar\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre></div>\n<ul>\n<li>useEffect component her render tamamlandıktan sonra çalışır. </li>\n<li>amacı render tamamlandıktan sonra yen etkileri uygulamaktır</li>\n<li>useEffect geriye bir function döndürürse o da component DOM’dan unmount olduğunda ve bir sonraki useEffect hesaplamadan önce çalıştırır</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function FriendStatusWithCounter(props) {\n  const [count, setCount] = useState(0);\n  useEffect(() =&gt; {\n    document.title = `You clicked ${count} times`;\n  });\n\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() =&gt; {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () =&gt; {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n      isOnline ? &#39;Online&#39; : &#39;Offline&#39;;\n    &lt;/div&gt;\n  );\n}</code></pre></div>\n<ul>\n<li>\n<p>useEffect return unmount sırasında çalıştığını gösterene akış aşağıdadır.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Mount with { friend: { id: 100 } } props\nChatAPI.subscribeToFriendStatus(100, handleStatusChange);     // Run first effect</code></pre></div>\n</li>\n</ul>\n<p>// Update with { friend: { id: 200 } } props\nChatAPI.unsubscribeFromFriendStatus(100, handleStatusChange); // Clean up previous effect\nChatAPI.subscribeToFriendStatus(200, handleStatusChange);     // Run next effect</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Her sefereinde component re render olmasını istemiyorsak 2. parametre veririz</code></pre></div>\n<p>useEffect(() => {\ndocument.title = <code class=\"language-text\">You clicked ${count} times</code>;\n}, [count]); // Only re-run the effect if count changes</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* ``npm install eslint-plugin-react-hooks --save-dev`` ile hooklar yalnızca function component ve diğer hooklardan çağrıldığı denetlebilir\n\n* useState yalnızca ilk renderda çalışır \n* ağır hesaplar için lazy initial state aşağıdaki yapılabilir</code></pre></div>\n<p>const [state, setState] = useState(() => {\nconst initialState = someExpensiveComputation(props);\nreturn initialState;\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## useContext\n* iç içe componentlerden context verilerine erişimi sağlar</code></pre></div>\n<p>const themes = {\nlight: {\nforeground: “#000000”,\nbackground: “#eeeeee”\n},\ndark: {\nforeground: “#ffffff”,\nbackground: “#222222”\n}\n};</p>\n<p>const ThemeContext = React.createContext(themes.light);</p>\n<p>function App() {\nreturn (\n&#x3C;ThemeContext.Provider value={themes.dark}>\n<Toolbar />\n&#x3C;/ThemeContext.Provider>\n);\n}</p>\n<p>function Toolbar(props) {\nreturn (\n<div>\n<ThemedButton />\n</div>\n);\n}</p>\n<p>function ThemedButton() {\nconst theme = useContext(ThemeContext);\nreturn (\n&#x3C;button style={{ background: theme.background, color: theme.foreground }}>\nI am styled by theme context!\n</button>\n);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## useReducer\n* useState‘e bir alternatiftir\n* karmaşık bir state mantığı varsa useState&#39;e göre avantajlıdır\nimzası aşağıdaki gibidir\n``const [state, dispatch] = useReducer(reducer, initialArg, init);``\n* callback göndermeye gerek yoktur bunun yerine dispatch methodu döner zaten\n\nTemel bir örnek aşağıdaki gibidir.</code></pre></div>\n<p>const initialState = {count: 0};</p>\n<p>function reducer(state, action) {\nswitch (action.type) {\ncase ‘increment’:\nreturn {count: state.count + 1};\ncase ‘decrement’:\nreturn {count: state.count - 1};\ndefault:\nthrow new Error();\n}\n}</p>\n<p>function Counter() {\nconst [state, dispatch] = useReducer(reducer, initialState);\nreturn (\n&#x3C;>\nCount: {state.count}\n&#x3C;button onClick={() => dispatch({type: ‘decrement’})}>-</button>\n&#x3C;button onClick={() => dispatch({type: ‘increment’})}>+</button>\n&#x3C;/>\n);\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">* State başlangıç değerlerini hesaplamak ağırsa aşağıdaki gibi yapılabilir</code></pre></div>\n<p>function init(initialCount) {\nreturn {count: initialCount};\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>","timeToRead":4,"frontmatter":{"title":"React Hooks And Context","date":"May 06, 2021","spoiler":"Over the Redux and React Hooks"},"fields":{"slug":"/React Hooks And Context/","langKey":"en"}}},"pageContext":{"slug":"/React Hooks And Context/","previous":{"fields":{"slug":"/Jhipster/","langKey":"en","directoryName":"Jhipster","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Jhipster ile Spring best practice şablon proje"}},"next":{"fields":{"slug":"/From gravity to javascript how technology works/","langKey":"en","directoryName":"From gravity to javascript how technology works","maybeAbsoluteLinks":[]},"frontmatter":{"title":"From gravity to Javascript how technology works"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}