{"componentChunkName":"component---src-templates-blog-post-js","path":"/Spring Data Initialization/","result":{"data":{"site":{"siteMetadata":{"title":"yusufunlu","author":"Yusuf Unlu"}},"markdownRemark":{"id":"de6647ad-0c97-5bb2-9ce8-e3eaa3918f67","html":"<p>This article will give you examples of how to use Data Definition Language(DDL) and Data Manipulation Language(DML) files and differences</p>\n<p>Here is the official Spring Doc about it : <a href=\"https://docs.spring.io/spring-boot/docs/2.5.6/reference/htmlsingle/#howto.data-initialization.using-jpa\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/2.5.6/reference/htmlsingle/#howto.data-initialization.using-jpa</a></p>\n<p>If you search with “Spring Database Initialization” it mostly forward us to older Spring releases</p>\n<p>I like yml format than .properties which is equal actually</p>\n<p>I will refer this below application.yml in this blog post mostly.\n<code class=\"language-text\">#</code> is for comments</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring:\n  jpa:\n    generate-ddl: true\n    hibernate:\n      ddl-auto: create\n    show-sql: true\n    defer-datasource-initialization: true\n    #database: h2 #same as database-platform, it doesn&#39;t effect schema-{platform}.sql and data-{platform}.sql names\n    #database-platform: org.hibernate.dialect.H2Dialect\n  datasource:\n    url: jdbc:h2:mem:testdb #ALWAYS, EMBEDDED or NEVER will be calculated from h2\n    username: h2-user\n    password: h2-pass\n    driverClassName: org.h2.Driver\n    #initialization-mode: always # deprecated, moved to under sql.init, DON&#39;T USE\n    #platform: h2 #deprecated, moved to under sql.init, , DON&#39;T USE\n  sql:\n    init:\n      #continue-on-error: true\n      mode: ALWAYS\n      platform: h2 #it effect schema-{platform}.sql and data-{platform}.sql names\n\n  h2:\n    console:\n      enabled: true\n      path: /h2\n\nlogging:\n  level:\n    #root: INFO\n    #org.hibernate.SQL: TRACE\n    #spring.sql: TRACE\n    #javax.sql: TRACE\n    #org.h2.jdbc: TRACE\n    org.springframework.jdbc: TRACE\ndebug: false</code></pre></div>\n<p>In Spring Boot 2.5. spring.datasource.* properties related to DataSource initialization have been deprecated and migrated to new spring.sql.init.* properties. <a href=\"https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes#sql-script-datasource-initialization\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.5-Release-Notes#sql-script-datasource-initialization</a>\nspring.datasource is being mapped to DataSourceProperties beans automaticially and some fieds are deprecated in Java and yml sides.</p>\n<p>You can use below code to see the Spring bean by below code</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    @Autowired\n    JpaProperties jpaProperties;\n\n    @Autowired\n    HibernateProperties hibernateProperties;\n\n    @Autowired\n    DataSourceProperties dataSourceProperties;\n\n    @Autowired\n    SqlInitializationProperties sqlInitializationProperties;\n\n    @PersistenceContext\n    EntityManager em;\n\n    @Autowired\n    EntityManagerFactory entityManagerFactory;</code></pre></div>\n<p>You can check it out what fields deprecated from <a href=\"https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.html</a>\nSome of them</p>\n<ul>\n<li>spring.datasource.initialization-mode ==> spring.sql.init.mode</li>\n<li>spring.datasource.platform ==> spring.sql.init.platform</li>\n</ul>\n<p>There are 3 types of database schema creating(DDL) and importing data(DML): Hibernate and JDBC SQL scripts and high level tools like Flywaydb or Liquibase. We will talk about Hibernate and JDBC SQL scripts methods here.</p>\n<p>SQL scripts method means that <strong>schema.sql</strong> is for schema and <strong>data.sql</strong> is for putting data. </p>\n<ul>\n<li><strong>spring.jpa.hibernate.ddl-auto</strong> default value is <strong>create-drop</strong> if it is embedded by looking at JDBC url <strong>spring.datasource.url</strong>   </li>\n<li><strong>import.sql</strong> is executed by Hibernate if <strong>hibernate.ddl-auto</strong> is create or create-drop</li>\n<li>if <strong>sql.init.mode</strong> is embedded it execute import.sql</li>\n<li>creation schema from Jpa entities is managed by <strong>generate-ddl</strong> is true or <strong>hibernate.ddl-auto</strong> </li>\n</ul>\n<p>The below table indicate that when schema.sql,data.sql, import.sql and schema from entities are working.\ninitialization-mode, generate-ddl and hibernate.ddl-auto are inputs</p>\n<table>\n<thead>\n<tr>\n<th><code class=\"language-text\">initialization-mode</code></th>\n<th><code class=\"language-text\">generate-ddl</code></th>\n<th><code class=\"language-text\">hibernate.ddl-auto</code></th>\n<th>schema.sql</th>\n<th>data.sql</th>\n<th>create schema from entities</th>\n<th>import.sql</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>never</td>\n<td>true</td>\n<td>create</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>never</td>\n<td>true</td>\n<td>none</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n</tr>\n<tr>\n<td>never</td>\n<td>false</td>\n<td>create</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>never</td>\n<td>false</td>\n<td>none</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<p>While multiple data source initialization technologies is not recommendded you can still use JDBC init and hibernate together.</p>\n<p><strong>spring.jpa.defer-datasource-initialization</strong> defer <strong>schema.sql</strong> and <strong>data.sql</strong> after hibernate schema</p>\n<ul>\n<li>When <strong>defer-datasource-initialization: false</strong></li>\n<li>\n<ul>\n<li><strong>schema.sql</strong>-> <strong>data.sql</strong>-> <code class=\"language-text\">JPA schema create from Entities</code> -> <strong>import.sql</strong></li>\n</ul>\n</li>\n<li>When <strong>defer-datasource-initialization: true</strong></li>\n<li>\n<ul>\n<li><code class=\"language-text\">JPA schema create from Entities</code> -> <strong>import.sql</strong> -> <strong>schema.sql</strong>-> <strong>data.sql</strong></li>\n</ul>\n</li>\n</ul>\n<p>sql.init.platform manage the name of data-{platform}.sql and schema-{platform}.sql with some bugs. Default is all and it means schema.sql and data.sql</p>\n<p>Spring Boot chooses a default value for you based on whether it thinks your database is embedded. It defaults to create-drop if no schema manager has been detected or none in all other cases. An embedded database is detected by looking at the Connection type and JDBC url. hsqldb, h2, and derby are candidates, and others are not. </p>\n<p>Sometimes calculating default values are incorrect for DDL and DML. So I am planning to move all those to Flyway.</p>","timeToRead":4,"frontmatter":{"title":"Spring Database Initialization","date":"January 04, 2022","spoiler":"Hibernate, JDBC and Flyway examples and their external configurations"},"fields":{"slug":"/Spring Data Initialization/","langKey":"en"}}},"pageContext":{"slug":"/Spring Data Initialization/","previous":{"fields":{"slug":"/React Hooks And Context/","langKey":"en","directoryName":"React Hooks And Context","maybeAbsoluteLinks":[]},"frontmatter":{"title":"React Hooks And Context"}},"next":{"fields":{"slug":"/Blockchain and ethereum/","langKey":"en","directoryName":"Blockchain and ethereum","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Blockchain and Ethereum"}},"translations":[],"translatedLinks":[]}},"staticQueryHashes":["336482444"]}